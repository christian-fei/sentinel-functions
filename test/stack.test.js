const {ok, throws} = require('assert')
const Stack = require('../lib/stack')
const {logP} = require('../lib/utils/logger')
const {bucketExists, codeExists, lambdaExists, roleExists, ruleExists, not, config, loose} = require('./utils')
const delay = require('delay')

test('stack', () => {
  test.timeout('creates and deletes stack', (done) => {
    Promise.resolve()
    .then(() => loose(Stack.destroy(config)))
    .then(logP('-> bucket exists?'))
    .then(() => not(bucketExists(config))).then(ok)
    .then(logP(' -> nope'))
    .then(logP('-> code exists?'))
    .then(() => not(codeExists(config))).then(ok)
    .then(logP(' -> nope'))
    .then(logP('-> lambda exists?'))
    .then(() => not(lambdaExists(config))).then(ok)
    .then(logP(' -> nope'))
    .then(logP('-> role exists?'))
    .then(() => not(roleExists(config))).then(ok)
    .then(logP(' -> nope'))
    .then(logP('-> rule exists?'))
    .then(() => not(ruleExists(config))).then(ok)
    .then(logP(' -> nope'))

    .then(() => Stack.create(config))
    .then(delay(5000))
    .then(logP('-> bucket exists?'))
    .then(() => bucketExists(config)).then(ok)
    .then(logP(' -> yep'))
    .then(logP('-> code exists?'))
    .then(() => codeExists(config)).then(ok)
    .then(logP(' -> yep'))
    .then(logP('-> lambda exists?'))
    .then(() => lambdaExists(config)).then(ok)
    .then(logP(' -> yep'))
    .then(logP('-> role exists?'))
    .then(() => roleExists(config)).then(ok)
    .then(logP(' -> yep'))
    .then(logP('-> rule exists?'))
    .then(() => ruleExists(config)).then(ok)
    .then(logP(' -> yep'))
    .then(() => done())
    .catch(done)
  }, 90000)

  test('Stack.create throws when options are missing', () => {
    throws(() => Stack.create({}))
  })
  test('Stack.destroy throws when options are missing', () => {
    throws(() => Stack.destroy({}))
  })
})
